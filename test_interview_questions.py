#!/usr/bin/env python3
"""
Test script to verify interview questions data flow
"""

import json
from supabase_manager import get_supabase_manager

def test_interview_questions_flow():
    """Test the interview questions data flow"""
    
    # Sample data that should be generated by AI agents
    sample_evaluation = {
        "candidate_name": "Test Candidate",
        "overall_score": 85,
        "qualification_tag": "QUALIFIED",
        "category_scores": {
            "experience": 90,
            "skills": 85,
            "education": 80,
            "achievements": 88,
            "culture": 82
        },
        "strengths": ["Strong technical skills", "Effective collaboration"],
        "areas_of_concern": ["Limited industry experience"],
        "recommendations": "Focus on gaining more industry exposure.",
        "interview_questions": {
            "technical_questions": [
                "Can you explain a complex technical concept?",
                "How do you approach debugging?"
            ],
            "behavioral_questions": [
                "Tell me about a time when you had to work under pressure",
                "Describe a challenging project you worked on"
            ],
            "situational_questions": [
                "What would you do if you discovered a critical bug?",
                "How would you handle conflicting requirements?"
            ],
            "cultural_fit_questions": [
                "How do you approach collaboration?",
                "What's your preferred work style?"
            ],
            "gap_assessment_questions": [
                "What areas do you need to develop?",
                "How do you stay updated with technology?"
            ],
            "interview_duration": "90 minutes",
            "panel_composition": "Hiring manager, senior engineer",
            "evaluation_criteria": "Strong technical skills and cultural fit"
        }
    }
    
    print("üß™ Testing Interview Questions Data Flow")
    print("=" * 50)
    
    # Test 1: Check if data structure is correct
    print("‚úÖ Test 1: Data Structure")
    if 'interview_questions' in sample_evaluation:
        print(f"   Interview questions found: {len(sample_evaluation['interview_questions'])} categories")
        for category, questions in sample_evaluation['interview_questions'].items():
            if isinstance(questions, list):
                print(f"   - {category}: {len(questions)} questions")
            else:
                print(f"   - {category}: {questions}")
    else:
        print("   ‚ùå No interview questions found")
    
    # Test 2: Test Supabase insertion
    print("\n‚úÖ Test 2: Supabase Insertion")
    try:
        supabase_manager = get_supabase_manager()
        
        # Insert test data
        test_result = {
            'candidate_name': sample_evaluation['candidate_name'],
            'overall_score': sample_evaluation['overall_score'],
            'qualification_tag': sample_evaluation['qualification_tag'],
            'explanation': sample_evaluation['recommendations'],
            'feedback': "Strengths: " + ", ".join(sample_evaluation['strengths']),
            'interview_questions': sample_evaluation['interview_questions']
        }
        
        print(f"   Inserting test data for {test_result['candidate_name']}")
        inserted_id = supabase_manager.insert_evaluation_result(test_result)
        
        if inserted_id:
            print(f"   ‚úÖ Successfully inserted with ID: {inserted_id}")
            
            # Retrieve and verify
            results = supabase_manager.get_all_results()
            test_result_retrieved = None
            for result in results:
                if result.get('candidate_name') == test_result['candidate_name']:
                    test_result_retrieved = result
                    break
            
            if test_result_retrieved:
                print(f"   ‚úÖ Retrieved test data")
                if test_result_retrieved.get('interview_questions'):
                    print(f"   ‚úÖ Interview questions preserved: {len(test_result_retrieved['interview_questions'])} categories")
                    for category, questions in test_result_retrieved['interview_questions'].items():
                        if isinstance(questions, list):
                            print(f"      - {category}: {len(questions)} questions")
                        else:
                            print(f"      - {category}: {questions}")
                else:
                    print(f"   ‚ùå Interview questions lost during storage")
            else:
                print(f"   ‚ùå Could not retrieve test data")
        else:
            print(f"   ‚ùå Failed to insert test data")
            
    except Exception as e:
        print(f"   ‚ùå Error during Supabase test: {e}")
        import traceback
        traceback.print_exc()
    
    # Test 3: Check existing data
    print("\n‚úÖ Test 3: Existing Data Analysis")
    try:
        supabase_manager = get_supabase_manager()
        results = supabase_manager.get_all_results()
        
        print(f"   Found {len(results)} existing results")
        
        for i, result in enumerate(results):
            candidate_name = result.get('candidate_name', 'Unknown')
            interview_questions = result.get('interview_questions', {})
            
            if interview_questions and interview_questions != {}:
                print(f"   ‚úÖ Result {i+1} ({candidate_name}): Has interview questions")
                print(f"      Categories: {list(interview_questions.keys())}")
            else:
                print(f"   ‚ùå Result {i+1} ({candidate_name}): No interview questions")
                
    except Exception as e:
        print(f"   ‚ùå Error analyzing existing data: {e}")

if __name__ == "__main__":
    test_interview_questions_flow() 